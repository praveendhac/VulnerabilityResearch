#!/usr/bin/python
import httpanomalies

import sys

#thismodule = sys.modules[__name__]
#print "thismodule:", thismodule

def wget_cmd(ip_addr, tcp_port, overflow_buf):
    if int(tcp_port) == 80:
        url_ip_port = "http://" + ip_addr
    else:
        url_ip_port = "http://" + ip_addr + tcp_port 
    cmd = "wget --header " 
    return cmd,url_ip_port 

def send_anomaly(option, ip_addr, tcp_port, overflow_buf):
    print "Sending traffic for anomaly", httpanomalies.http_anomaly_dict[option]
    #function reference
    anon_func = getattr(httpanomalies, httpanomalies.http_anomaly_dict[option])
    wcmd,url_ip_port = wget_cmd(ip_addr, tcp_port, overflow_buf)
    print "wcmd:", wcmd
    print "url_ip_port:", url_ip_port
    #call required function
    anon_func(wcmd, url_ip_port, overflow_buf)

def list_anomalies():
    #print "http_anomaly_dict keys:", httpanomalies.http_anomaly_dict.keys()
    #print "http_anomaly_dict values:", httpanomalies.http_anomaly_dict.values()
    print "http_anomaly_dict items:", httpanomalies.http_anomaly_dict.items()
    print "Total HTTP Anomalies: ", len(httpanomalies.http_anomaly_dict)
    #print "http_anomaly_dict str:", str(httpanomalies.http_anomaly_dict)

def exit_program():
    sys.exit()

def send_all_anomalies_traffic():
    print "Sending Traffic of all anomalies"

def usage():
    print "%s <web_server_ip> <server_port>" %(sys.argv[0])
    print "e.g.\n%s 192.168.1.8 80" %(sys.argv[0])
    sys.exit()

def main():
    print "number of arguments:", len(sys.argv)
    if len(sys.argv) !=3:
        usage()
    ip_addr = sys.argv[1]
    tcp_port = sys.argv[2]
    overflow_buf = "D"*2222
    while True:
        print "\nOptions: l=list anomalies, 8=send number 8 anomaly traffic, e=exit, q=quit, a=all anomalies"
        opt=raw_input('Enter option: ')
        if opt == "e" or opt == "q":
            print "Exiting"
            exit_program()
        elif opt == "l":
            list_anomalies()
        elif opt == "a":
            send_all_anomalies_traffic(ip_addr, tcp_port, overflow_buf)
        elif opt.isdigit():
            print "opt is a digit"
            if int(opt) >=1 or int(opt) <= len(httpanomalies.http_anomaly_dict):
                print "dict val:", httpanomalies.http_anomaly_dict[opt]
                send_anomaly(opt, ip_addr, tcp_port, overflow_buf)
            else:
                print "Enter matching correct anomaly"
                continue
        else:
            print "Invalid input. Check options"

if __name__ == "__main__":
    main()
